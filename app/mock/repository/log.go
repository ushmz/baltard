// Code generated by MockGen. DO NOT EDIT.
// Source: log.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "ratri/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLogRepository is a mock of LogRepository interface.
type MockLogRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLogRepositoryMockRecorder
}

// MockLogRepositoryMockRecorder is the mock recorder for MockLogRepository.
type MockLogRepositoryMockRecorder struct {
	mock *MockLogRepository
}

// NewMockLogRepository creates a new mock instance.
func NewMockLogRepository(ctrl *gomock.Controller) *MockLogRepository {
	mock := &MockLogRepository{ctrl: ctrl}
	mock.recorder = &MockLogRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogRepository) EXPECT() *MockLogRepositoryMockRecorder {
	return m.recorder
}

// CumulatePageDwellTime mocks base method.
func (m *MockLogRepository) CumulatePageDwellTime(arg0 *model.PageDwellTimeLogParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CumulatePageDwellTime", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CumulatePageDwellTime indicates an expected call of CumulatePageDwellTime.
func (mr *MockLogRepositoryMockRecorder) CumulatePageDwellTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CumulatePageDwellTime", reflect.TypeOf((*MockLogRepository)(nil).CumulatePageDwellTime), arg0)
}

// CumulateSerpDwellTime mocks base method.
func (m *MockLogRepository) CumulateSerpDwellTime(arg0 *model.SerpDwellTimeLogParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CumulateSerpDwellTime", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CumulateSerpDwellTime indicates an expected call of CumulateSerpDwellTime.
func (mr *MockLogRepositoryMockRecorder) CumulateSerpDwellTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CumulateSerpDwellTime", reflect.TypeOf((*MockLogRepository)(nil).CumulateSerpDwellTime), arg0)
}

// FetchAllPageDwellTimeLogs mocks base method.
func (m *MockLogRepository) FetchAllPageDwellTimeLogs() ([]model.PageDwellTimeLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllPageDwellTimeLogs")
	ret0, _ := ret[0].([]model.PageDwellTimeLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllPageDwellTimeLogs indicates an expected call of FetchAllPageDwellTimeLogs.
func (mr *MockLogRepositoryMockRecorder) FetchAllPageDwellTimeLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllPageDwellTimeLogs", reflect.TypeOf((*MockLogRepository)(nil).FetchAllPageDwellTimeLogs))
}

// FetchAllSearchSessions mocks base method.
func (m *MockLogRepository) FetchAllSearchSessions() ([]model.SearchSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllSearchSessions")
	ret0, _ := ret[0].([]model.SearchSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllSearchSessions indicates an expected call of FetchAllSearchSessions.
func (mr *MockLogRepositoryMockRecorder) FetchAllSearchSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllSearchSessions", reflect.TypeOf((*MockLogRepository)(nil).FetchAllSearchSessions))
}

// FetchAllSerpDwellTimeLogs mocks base method.
func (m *MockLogRepository) FetchAllSerpDwellTimeLogs() ([]model.SerpDwellTimeLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllSerpDwellTimeLogs")
	ret0, _ := ret[0].([]model.SerpDwellTimeLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllSerpDwellTimeLogs indicates an expected call of FetchAllSerpDwellTimeLogs.
func (mr *MockLogRepositoryMockRecorder) FetchAllSerpDwellTimeLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllSerpDwellTimeLogs", reflect.TypeOf((*MockLogRepository)(nil).FetchAllSerpDwellTimeLogs))
}

// FetchAllSerpEventLogs mocks base method.
func (m *MockLogRepository) FetchAllSerpEventLogs() ([]model.SearchPageEventLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllSerpEventLogs")
	ret0, _ := ret[0].([]model.SearchPageEventLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllSerpEventLogs indicates an expected call of FetchAllSerpEventLogs.
func (mr *MockLogRepositoryMockRecorder) FetchAllSerpEventLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllSerpEventLogs", reflect.TypeOf((*MockLogRepository)(nil).FetchAllSerpEventLogs))
}

// StoreSearchSeeion mocks base method.
func (m *MockLogRepository) StoreSearchSeeion(arg0 *model.SearchSessionParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSearchSeeion", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSearchSeeion indicates an expected call of StoreSearchSeeion.
func (mr *MockLogRepositoryMockRecorder) StoreSearchSeeion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSearchSeeion", reflect.TypeOf((*MockLogRepository)(nil).StoreSearchSeeion), arg0)
}

// StoreSerpEventLog mocks base method.
func (m *MockLogRepository) StoreSerpEventLog(arg0 *model.SearchPageEventLogParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSerpEventLog", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSerpEventLog indicates an expected call of StoreSerpEventLog.
func (mr *MockLogRepositoryMockRecorder) StoreSerpEventLog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSerpEventLog", reflect.TypeOf((*MockLogRepository)(nil).StoreSerpEventLog), arg0)
}
