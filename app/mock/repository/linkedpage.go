// Code generated by MockGen. DO NOT EDIT.
// Source: linkedpage.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "ratri/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLinkedPageRepository is a mock of LinkedPageRepository interface.
type MockLinkedPageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLinkedPageRepositoryMockRecorder
}

// MockLinkedPageRepositoryMockRecorder is the mock recorder for MockLinkedPageRepository.
type MockLinkedPageRepositoryMockRecorder struct {
	mock *MockLinkedPageRepository
}

// NewMockLinkedPageRepository creates a new mock instance.
func NewMockLinkedPageRepository(ctrl *gomock.Controller) *MockLinkedPageRepository {
	mock := &MockLinkedPageRepository{ctrl: ctrl}
	mock.recorder = &MockLinkedPageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkedPageRepository) EXPECT() *MockLinkedPageRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockLinkedPageRepository) Get(linkedPageID int) (model.LinkedPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", linkedPageID)
	ret0, _ := ret[0].(model.LinkedPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLinkedPageRepositoryMockRecorder) Get(linkedPageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLinkedPageRepository)(nil).Get), linkedPageID)
}

// GetBySearchPageIDs mocks base method.
func (m *MockLinkedPageRepository) GetBySearchPageIDs(pageID []int, taskID, top int) ([]model.SearchPageWithLinkedPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySearchPageIDs", pageID, taskID, top)
	ret0, _ := ret[0].([]model.SearchPageWithLinkedPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySearchPageIDs indicates an expected call of GetBySearchPageIDs.
func (mr *MockLinkedPageRepositoryMockRecorder) GetBySearchPageIDs(pageID, taskID, top interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySearchPageIDs", reflect.TypeOf((*MockLinkedPageRepository)(nil).GetBySearchPageIDs), pageID, taskID, top)
}

// GetRatioBySearchPageIDs mocks base method.
func (m *MockLinkedPageRepository) GetRatioBySearchPageIDs(pageID []int, taskID int) ([]model.SearchPageWithLinkedPageRatio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRatioBySearchPageIDs", pageID, taskID)
	ret0, _ := ret[0].([]model.SearchPageWithLinkedPageRatio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRatioBySearchPageIDs indicates an expected call of GetRatioBySearchPageIDs.
func (mr *MockLinkedPageRepositoryMockRecorder) GetRatioBySearchPageIDs(pageID, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRatioBySearchPageIDs", reflect.TypeOf((*MockLinkedPageRepository)(nil).GetRatioBySearchPageIDs), pageID, taskID)
}

// List mocks base method.
func (m *MockLinkedPageRepository) List(offset, limit int) ([]model.LinkedPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", offset, limit)
	ret0, _ := ret[0].([]model.LinkedPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockLinkedPageRepositoryMockRecorder) List(offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLinkedPageRepository)(nil).List), offset, limit)
}

// Select mocks base method.
func (m *MockLinkedPageRepository) Select(linkedPageIDs []int) ([]model.LinkedPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", linkedPageIDs)
	ret0, _ := ret[0].([]model.LinkedPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockLinkedPageRepositoryMockRecorder) Select(linkedPageIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockLinkedPageRepository)(nil).Select), linkedPageIDs)
}
