// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/users": {
            "post": {
                "description": "Register user using crowd-sourcing service ID and allocate task at the same time. If external service ID is already exists, re-allocate task and return.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Register new user.",
                "operationId": "create_user",
                "parameters": [
                    {
                        "description": "User parameter",
                        "name": "param",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserParam"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "400": {
                        "description": "Error with message"
                    },
                    "500": {
                        "description": "Error with message"
                    }
                }
            }
        },
        "/v1/logs/click": {
            "post": {
                "description": "Create click log in SERP.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Store SERP click log",
                "operationId": "create_serp_click_log",
                "parameters": [
                    {
                        "description": "Log parameter",
                        "name": "param",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SearchPageEventLogParam"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Error with message"
                    },
                    "500": {
                        "description": "Error with message"
                    }
                }
            }
        },
        "/v1/logs/pageview": {
            "post": {
                "description": "Create page viewing time log. Viewing time is measured by cumulating number of requests that should be sended once/sec.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Store page viewing time log",
                "operationId": "cumulate_page_viewing_time",
                "parameters": [
                    {
                        "description": "Log parameter",
                        "name": "param",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PageViewingLogParam"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Error with message"
                    },
                    "500": {
                        "description": "Error with message"
                    }
                }
            }
        },
        "/v1/logs/serp": {
            "post": {
                "description": "Create task time log. Task time is measured by cumulating number of requests that should be sended once/sec.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Store task time log",
                "operationId": "cumulate_task_time_log",
                "parameters": [
                    {
                        "description": "Log parameter",
                        "name": "param",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SerpViewingLogParam"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Error with message"
                    },
                    "500": {
                        "description": "Error with message"
                    }
                }
            }
        },
        "/v1/logs/session": {
            "post": {
                "description": "Store search session log that is consists of task start(User presses the \"Start searching for the task\" button) and end(User presses the \"Submit answer\" button) time.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Store search session log",
                "operationId": "store_search_session",
                "parameters": [
                    {
                        "description": "Log parameter",
                        "name": "param",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SearchSession"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Error with message"
                    },
                    "500": {
                        "description": "Error with message"
                    }
                }
            }
        },
        "/v1/serp/{taskId}": {
            "get": {
                "description": "Returns json which have a list of search results with no additional data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns json which have a list of search results.",
                "operationId": "fetch_serp_by_id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of offset to display",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.SearchPage"
                            }
                        }
                    },
                    "400": {
                        "description": ""
                    },
                    "500": {
                        "description": ""
                    }
                }
            }
        },
        "/v1/serp/{taskId}/icon": {
            "get": {
                "description": "Returns json which have a list of search results with tracked pages of Similarweb top 2000 pages and its favicon URL.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns json which have a list of search results with data for IconUI.",
                "operationId": "fetch_serp_with_icon_by_id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of offset to display",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of icons to display",
                        "name": "top",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.SerpWithIcon"
                            }
                        }
                    },
                    "400": {
                        "description": ""
                    },
                    "500": {
                        "description": ""
                    }
                }
            }
        },
        "/v1/serp/{taskId}/ratio": {
            "get": {
                "description": "Returns json which have a list of search results with tracked pages of Similarweb top 2000 and its category.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns json which have a list of search results with data for RatioUI.",
                "operationId": "fetch_serp_with_distribution_by_id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of offset to display",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of categories to display",
                        "name": "top",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.SerpWithRatio"
                            }
                        }
                    },
                    "400": {
                        "description": ""
                    },
                    "500": {
                        "description": ""
                    }
                }
            }
        },
        "/v1/task/answer": {
            "post": {
                "description": "Submit task answer.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Submit task answer.",
                "operationId": "submit_task_answer",
                "parameters": [
                    {
                        "description": "Answer parameter",
                        "name": "param",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Answer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Error with message"
                    },
                    "500": {
                        "description": "Error with message"
                    }
                }
            }
        },
        "/v1/task/{id}": {
            "get": {
                "description": "Fetch task information by requeted task ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Fetch task information.",
                "operationId": "fetch_task_info",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Task"
                        }
                    },
                    "400": {
                        "description": "Error with message"
                    },
                    "500": {
                        "description": "Error with message"
                    }
                }
            }
        },
        "/v1/users/code/{id}": {
            "get": {
                "description": "Get unique task completion code.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get completion code.",
                "operationId": "get_completion_code",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Completion code",
                        "schema": {
                            "type": "int"
                        }
                    },
                    "400": {
                        "description": "Error with message"
                    },
                    "500": {
                        "description": "Error with message"
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Answer": {
            "type": "object",
            "properties": {
                "answer": {
                    "description": "Answer : The Url of evidence of users' decision.",
                    "type": "string"
                },
                "condition": {
                    "description": "ConditionId : This point out which kind of task did user take.",
                    "type": "integer"
                },
                "id": {
                    "description": "Id : The ID of user.",
                    "type": "integer"
                },
                "reason": {
                    "description": "Reason : The reason of users' decision.",
                    "type": "string"
                },
                "task": {
                    "description": "TaskId : The identity of task.",
                    "type": "integer"
                },
                "user": {
                    "description": "UserId : Means external Id.",
                    "type": "integer"
                }
            }
        },
        "model.CategoryCount": {
            "type": "object",
            "properties": {
                "category": {
                    "description": "Category : Category name.",
                    "type": "string"
                },
                "count": {
                    "description": "Count : Total number of pages.",
                    "type": "integer"
                },
                "pct": {
                    "description": "Percentage : The percentage of this category.",
                    "type": "number"
                }
            }
        },
        "model.PageViewingLogParam": {
            "type": "object",
            "properties": {
                "condition": {
                    "description": "ConditionId : User's condition Id that means group and task category.",
                    "type": "integer"
                },
                "page": {
                    "description": "PageId : Page ID that user view.",
                    "type": "integer"
                },
                "task": {
                    "description": "TaskId : The Id of task that user working.",
                    "type": "integer"
                },
                "user": {
                    "description": "UserId : The ID of user (worker)",
                    "type": "integer"
                }
            }
        },
        "model.SearchPage": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "PageId : ID of search page.",
                    "type": "integer"
                },
                "snippet": {
                    "description": "Snippet : Snippet of each search result page.",
                    "type": "string"
                },
                "title": {
                    "description": "Title : The title of each search result page.",
                    "type": "string"
                },
                "url": {
                    "description": "Url : Url of each search result page.",
                    "type": "string"
                }
            }
        },
        "model.SearchPageEventLogParam": {
            "type": "object",
            "properties": {
                "conditionId": {
                    "description": "ConditionId : User's condition Id that means group and task category.",
                    "type": "integer"
                },
                "event": {
                    "description": "Event : It is expected to be \"click\", \"hover\" or \"paginate\"",
                    "type": "string"
                },
                "id": {
                    "description": "Id : The ID of each log record.",
                    "type": "string"
                },
                "page": {
                    "description": "Page : The Id of page that user clicked.",
                    "type": "integer"
                },
                "rank": {
                    "description": "Rank : Search result rank that user clicked.",
                    "type": "integer"
                },
                "taskId": {
                    "description": "TaskId : The Id of task that user working.",
                    "type": "integer"
                },
                "time": {
                    "description": "Time : User's page viewing time.",
                    "type": "integer"
                },
                "user": {
                    "description": "Uid : The ID of user (worker)",
                    "type": "integer"
                },
                "visible": {
                    "description": "IsVisible : Risk is visible or not.",
                    "type": "boolean"
                }
            }
        },
        "model.SearchSession": {
            "type": "object",
            "properties": {
                "condition": {
                    "description": "ConditionId : User's condition Id that means group and task category.",
                    "type": "integer"
                },
                "task": {
                    "description": "TaskId : The Id of task that user working.",
                    "type": "integer"
                },
                "user": {
                    "description": "UserId : Allocated ID of user (worker)",
                    "type": "integer"
                }
            }
        },
        "model.SerpViewingLogParam": {
            "type": "object",
            "properties": {
                "condition": {
                    "description": "ConditionId : User's condition Id that means group and task category.",
                    "type": "integer"
                },
                "task": {
                    "description": "TaskId : The Id of task that user working.",
                    "type": "integer"
                },
                "user": {
                    "description": "UserId : The ID of user (worker)",
                    "type": "integer"
                }
            }
        },
        "model.SerpWithIcon": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "PageId : ID of search page.",
                    "type": "integer"
                },
                "leaks": {
                    "description": "LeaksSet : Users' behavioral data that probably leaked to third party. For more detail, see ` + "`" + `Leaks` + "`" + ` type.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.SimilarwebPage"
                    }
                },
                "snippet": {
                    "description": "Snippet : Snippet of each search result page.",
                    "type": "string"
                },
                "title": {
                    "description": "Title : The title of each search result page.",
                    "type": "string"
                },
                "url": {
                    "description": "Url : Url of each search result page.",
                    "type": "string"
                }
            }
        },
        "model.SerpWithRatio": {
            "type": "object",
            "properties": {
                "distribution": {
                    "description": "Distribution : Distribution information for each categories.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CategoryCount"
                    }
                },
                "id": {
                    "description": "PageId : ID of search page.",
                    "type": "integer"
                },
                "snippet": {
                    "description": "Snippet : Snippet of each search result page.",
                    "type": "string"
                },
                "title": {
                    "description": "Title : The title of each search result page.",
                    "type": "string"
                },
                "total": {
                    "description": "Total : Total number of similarweb pages.",
                    "type": "integer"
                },
                "url": {
                    "description": "Url : Url of each search result page.",
                    "type": "string"
                }
            }
        },
        "model.SimilarwebPage": {
            "type": "object",
            "properties": {
                "category": {
                    "description": "Category : Category name of similarweb.",
                    "type": "string"
                },
                "icon": {
                    "description": "Icon : Favicon url of the page.",
                    "type": "string"
                },
                "id": {
                    "description": "Id : ID of similarweb pages.",
                    "type": "integer"
                },
                "title": {
                    "description": "Title : The title of similarweb page.",
                    "type": "string"
                },
                "url": {
                    "description": "Url : Url of the similarweb page.",
                    "type": "string"
                }
            }
        },
        "model.Task": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description : Description text of task.",
                    "type": "string"
                },
                "id": {
                    "description": "Id : The ID of task",
                    "type": "integer"
                },
                "query": {
                    "description": "Query : Search query for this task.",
                    "type": "string"
                },
                "searchUrl": {
                    "description": "SearchUrl : Url used in this task.",
                    "type": "string"
                },
                "title": {
                    "description": "Title : Title of this task.",
                    "type": "string"
                }
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Id : The ID of user.",
                    "type": "integer"
                },
                "secret": {
                    "description": "Secret : Generated secret string.",
                    "type": "string"
                },
                "uid": {
                    "description": "Uid : External user_id (like crowdsourcing site).",
                    "type": "string"
                }
            }
        },
        "model.UserParam": {
            "type": "object",
            "properties": {
                "uid": {
                    "description": "Uid : User name/Id for label.",
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8080",
	BasePath:    "/api",
	Schemes:     []string{},
	Title:       "ratri API",
	Description: "ratri is a simple backend API for information retrieval experiments",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
