// Code generated by MockGen. DO NOT EDIT.
// Source: task.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	model "ratri/internal/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTask is a mock of Task interface.
type MockTask struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMockRecorder
}

// MockTaskMockRecorder is the mock recorder for MockTask.
type MockTaskMockRecorder struct {
	mock *MockTask
}

// NewMockTask creates a new mock instance.
func NewMockTask(ctrl *gomock.Controller) *MockTask {
	mock := &MockTask{ctrl: ctrl}
	mock.recorder = &MockTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTask) EXPECT() *MockTaskMockRecorder {
	return m.recorder
}

// CreateTaskAnswer mocks base method.
func (m *MockTask) CreateTaskAnswer(answer *model.Answer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTaskAnswer", answer)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTaskAnswer indicates an expected call of CreateTaskAnswer.
func (mr *MockTaskMockRecorder) CreateTaskAnswer(answer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaskAnswer", reflect.TypeOf((*MockTask)(nil).CreateTaskAnswer), answer)
}

// FetchTaskInfo mocks base method.
func (m *MockTask) FetchTaskInfo(taskId int) (*model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTaskInfo", taskId)
	ret0, _ := ret[0].(*model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTaskInfo indicates an expected call of FetchTaskInfo.
func (mr *MockTaskMockRecorder) FetchTaskInfo(taskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTaskInfo", reflect.TypeOf((*MockTask)(nil).FetchTaskInfo), taskId)
}
