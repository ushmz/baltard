// Code generated by MockGen. DO NOT EDIT.
// Source: log.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	model "ratri/internal/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLog is a mock of Log interface.
type MockLog struct {
	ctrl     *gomock.Controller
	recorder *MockLogMockRecorder
}

// MockLogMockRecorder is the mock recorder for MockLog.
type MockLogMockRecorder struct {
	mock *MockLog
}

// NewMockLog creates a new mock instance.
func NewMockLog(ctrl *gomock.Controller) *MockLog {
	mock := &MockLog{ctrl: ctrl}
	mock.recorder = &MockLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLog) EXPECT() *MockLogMockRecorder {
	return m.recorder
}

// CumulatePageViewingTime mocks base method.
func (m *MockLog) CumulatePageViewingTime(arg0 *model.PageViewingLogParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CumulatePageViewingTime", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CumulatePageViewingTime indicates an expected call of CumulatePageViewingTime.
func (mr *MockLogMockRecorder) CumulatePageViewingTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CumulatePageViewingTime", reflect.TypeOf((*MockLog)(nil).CumulatePageViewingTime), arg0)
}

// CumulateSerpViewingTime mocks base method.
func (m *MockLog) CumulateSerpViewingTime(arg0 *model.SerpViewingLogParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CumulateSerpViewingTime", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CumulateSerpViewingTime indicates an expected call of CumulateSerpViewingTime.
func (mr *MockLogMockRecorder) CumulateSerpViewingTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CumulateSerpViewingTime", reflect.TypeOf((*MockLog)(nil).CumulateSerpViewingTime), arg0)
}

// StoreSearchSeeion mocks base method.
func (m *MockLog) StoreSearchSeeion(arg0 *model.SearchSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSearchSeeion", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSearchSeeion indicates an expected call of StoreSearchSeeion.
func (mr *MockLogMockRecorder) StoreSearchSeeion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSearchSeeion", reflect.TypeOf((*MockLog)(nil).StoreSearchSeeion), arg0)
}

// StoreSerpEventLog mocks base method.
func (m *MockLog) StoreSerpEventLog(arg0 *model.SearchPageEventLogParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSerpEventLog", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSerpEventLog indicates an expected call of StoreSerpEventLog.
func (mr *MockLogMockRecorder) StoreSerpEventLog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSerpEventLog", reflect.TypeOf((*MockLog)(nil).StoreSerpEventLog), arg0)
}
