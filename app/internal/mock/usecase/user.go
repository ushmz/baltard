// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	model "ratri/internal/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// AllocateTask mocks base method.
func (m *MockUser) AllocateTask() (model.TaskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateTask")
	ret0, _ := ret[0].(model.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateTask indicates an expected call of AllocateTask.
func (mr *MockUserMockRecorder) AllocateTask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateTask", reflect.TypeOf((*MockUser)(nil).AllocateTask))
}

// CreateUser mocks base method.
func (m *MockUser) CreateUser(uid string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", uid)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserMockRecorder) CreateUser(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUser)(nil).CreateUser), uid)
}

// FindByUid mocks base method.
func (m *MockUser) FindByUid(uid string) (*model.User, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUid", uid)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByUid indicates an expected call of FindByUid.
func (mr *MockUserMockRecorder) FindByUid(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUid", reflect.TypeOf((*MockUser)(nil).FindByUid), uid)
}

// GenerateRandomPasswd mocks base method.
func (m *MockUser) GenerateRandomPasswd(l int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRandomPasswd", l)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateRandomPasswd indicates an expected call of GenerateRandomPasswd.
func (mr *MockUserMockRecorder) GenerateRandomPasswd(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRandomPasswd", reflect.TypeOf((*MockUser)(nil).GenerateRandomPasswd), l)
}

// GetCompletionCode mocks base method.
func (m *MockUser) GetCompletionCode(userId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompletionCode", userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompletionCode indicates an expected call of GetCompletionCode.
func (mr *MockUserMockRecorder) GetCompletionCode(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompletionCode", reflect.TypeOf((*MockUser)(nil).GetCompletionCode), userId)
}
